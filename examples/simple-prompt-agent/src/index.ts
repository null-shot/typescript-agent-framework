/**
 * Welcome to Cloudflare Workers! This is your first worker.
 *
 * - Run `npm run dev` in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run `npm run deploy` to publish your worker
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

import { Hono } from 'hono';
import { 
	AgentEnv,
	applyPermissionlessAgentSessionRouter,
} from '@null-shot/agent';
// Import the ToolsService directly 
import { ToolboxService } from '@null-shot/agent/services';
import { LanguageModel } from 'ai';
import { createAnthropic } from '@ai-sdk/anthropic';
import { createOpenAI } from '@ai-sdk/openai';
import { AiSdkAgent, AIUISDKMessage } from '@null-shot/agent/aisdk';
import mcpConfig from '../mcp.json';
// Define AI provider type
type AIProvider = 'anthropic' | 'openai' | 'deepseek';

// Define a type that extends both the autogenerated Env and AgentEnv
type EnvWithAgent = Env & AgentEnv;

// Function to validate if a value is a valid AIProvider
function isValidAIProvider(value: unknown): value is AIProvider {
	return value === 'anthropic' || value === 'openai' || value === 'deepseek';
}

// Use type assertion to make Hono app compatible with AgentRouterBuilder
const app = new Hono<{ Bindings: EnvWithAgent }>();
applyPermissionlessAgentSessionRouter(app);

export class SimplePromptAgent extends AiSdkAgent<EnvWithAgent> {
	constructor(state: DurableObjectState, env: EnvWithAgent) {
		// Validate AI_PROVIDER before using it
		if (!isValidAIProvider(env.AI_PROVIDER)) {
			throw new Error(`Invalid AI provider: ${env.AI_PROVIDER}. Expected 'anthropic', 'openai', or 'deepseek'.`);
		}
		
		let model : LanguageModel;
		// This is just an example, ideally you only want ot inlcude models that you plan to use for your agent itself versus multiple models
		switch (env.AI_PROVIDER) {
			case 'anthropic':
				const anthropic = createAnthropic({
					apiKey: env.ANTHROPIC_API_KEY,
				});
				model = anthropic('claude-3-haiku-20240307');
				break;
			case 'openai':
				const openai = createOpenAI({
					apiKey: env.OPEN_AI_API_KEY,
				});
				model = openai('gpt-3.5-turbo');
				break;
			case 'deepseek':
				const deepseek = createOpenAI({
					apiKey: env.DEEPSEEK_API_KEY,
					baseURL: 'https://api.deepseek.com',
				});
				model = deepseek('deepseek-chat');
				break;
			default:
				// This should never happen due to validation above, but TypeScript requires this
				throw new Error(`Unsupported AI provider: ${env.AI_PROVIDER}`);
		}

		super(state, env, model, [new ToolboxService(env, mcpConfig)]);
	}

	async processMessage(sessionId: string, messages: AIUISDKMessage): Promise<Response> {
		const result = await this.streamText(sessionId, {
			model: this.model,
			system: 'You will use tools to help manage and mark off tasks on a todo list.',
			messages: messages.messages, 
			maxSteps: 10,
			experimental_toolCallStreaming: true,
			onError: (error) => {
				console.error('Error processing message', error);
			}
		});

		return result.toDataStreamResponse();
	}
}

// Export the worker handler
export default {
	async fetch(request: Request, env: EnvWithAgent, ctx: ExecutionContext): Promise<Response> {
		// Bootstrap the agent worker with the namespace
		return app.fetch(request, env, ctx);
	}
};
