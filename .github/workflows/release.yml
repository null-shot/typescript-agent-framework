name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    # Only run this job if it's in the original repository, not in forks
    if: github.repository == 'null-shot/typescript-agent-framework'
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set access public

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Version and Publish
        id: publish
        run: |
          # Apply changesets (update version numbers)
          pnpm changeset version

          # Extract versions for release notes
          MCP_VERSION=$(node -p "require('./packages/mcp/package.json').version")
          TEST_UTILS_VERSION=$(node -p "require('./packages/test-utils/package.json').version")
          AGENT_VERSION=$(node -p "require('./packages/agent/package.json').version")
          CLI_VERSION=$(node -p "require('./packages/cli/package.json').version")
          echo "MCP_VERSION=${MCP_VERSION}" >> $GITHUB_OUTPUT
          echo "TEST_UTILS_VERSION=${TEST_UTILS_VERSION}" >> $GITHUB_OUTPUT
          echo "AGENT_VERSION=${AGENT_VERSION}" >> $GITHUB_OUTPUT
          echo "CLI_VERSION=${CLI_VERSION}" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=v${MCP_VERSION}" >> $GITHUB_OUTPUT

          # Commit the version updates
          git add .
          git commit -m "chore(release): version packages" || echo "No changes to commit"

          # Build once more to ensure latest versions are included
          pnpm build

          # Run tests
          pnpm test

          # Manually publish each package with npm
          echo "Publishing packages directly with npm..."

          # Publish test-utils
          cd packages/test-utils
          npm publish --access public || echo "Failed to publish test-utils, may already exist"

          # Publish mcp
          cd ../mcp
          npm publish --access public || echo "Failed to publish mcp, may already exist"

          # Publish agent
          cd ../agent
          npm publish --access public || echo "Failed to publish agent, may already exist"

          # Publish CLI
          cd ../cli
          npm publish --access public || echo "Failed to publish cli, may already exist"

          cd ../..

          # Push the version updates and tags
          git push origin main

          # Create and push a version tag
          git tag -a "v${MCP_VERSION}" -m "Release v${MCP_VERSION}"
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { RELEASE_TAG, MCP_VERSION, TEST_UTILS_VERSION, AGENT_VERSION, CLI_VERSION } = process.env;

            // Get the commits since the last tag
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            // Create a nice markdown body
            const body = `
            ## Packages

            - @null-shot/mcp: ${MCP_VERSION}
            - @null-shot/test-utils: ${TEST_UTILS_VERSION}
            - @null-shot/agent: ${AGENT_VERSION}
            - @null-shot/cli: ${CLI_VERSION}

            ## Recent Changes

            ${commits.slice(0, 5).map(commit => (
              `- ${commit.commit.message} (${commit.sha.substring(0, 7)})`
            )).join('\n')}
            `;

            // Create the release
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: RELEASE_TAG,
              name: `Release ${RELEASE_TAG}`,
              body: body,
              draft: false,
              prerelease: false
            });
        env:
          RELEASE_TAG: ${{ steps.publish.outputs.RELEASE_TAG }}
          MCP_VERSION: ${{ steps.publish.outputs.MCP_VERSION }}
          TEST_UTILS_VERSION: ${{ steps.publish.outputs.TEST_UTILS_VERSION }}
          AGENT_VERSION: ${{ steps.publish.outputs.AGENT_VERSION }}
          CLI_VERSION: ${{ steps.publish.outputs.CLI_VERSION }}
