name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    # Only run this job if it's in the original repository, not in forks
    if: github.repository == 'null-shot/typescript-agent-framework'
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Test npm auth
        run: |
          echo "Testing npm auth..."
          npm whoami || echo "npm auth failed!"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Check for changesets
        id: changesets
        run: |
          # Count changeset files excluding README.md
          CHANGESET_COUNT=$(find .changeset -name "*.md" -not -name "README.md" | wc -l)
          if [ "$CHANGESET_COUNT" -gt 0 ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "Changesets found ($CHANGESET_COUNT files), proceeding with release"
            # List the changeset files for debugging
            find .changeset -name "*.md" -not -name "README.md" | while read file; do
              echo "Found changeset: $file"
            done
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT  
            echo "No changesets found, skipping release"
          fi

      - name: Version and Publish
        if: steps.changesets.outputs.has_changesets == 'true'
        run: |
          # Apply changesets (update version numbers)
          pnpm changeset version

          # Check if any versions were actually changed
          if git diff --quiet; then
            echo "No version changes to commit"
            exit 0
          fi

          # Extract versions for release notes
          MCP_VERSION=$(node -p "require('./packages/mcp/package.json').version")
          TEST_UTILS_VERSION=$(node -p "require('./packages/test-utils/package.json').version")
          AGENT_VERSION=$(node -p "require('./packages/agent/package.json').version")
          CLI_VERSION=$(node -p "require('./packages/cli/package.json').version")

          echo "MCP_VERSION=${MCP_VERSION}" >> $GITHUB_ENV
          echo "TEST_UTILS_VERSION=${TEST_UTILS_VERSION}" >> $GITHUB_ENV
          echo "AGENT_VERSION=${AGENT_VERSION}" >> $GITHUB_ENV
          echo "CLI_VERSION=${CLI_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_TAG=v${MCP_VERSION}" >> $GITHUB_ENV

          # Commit the version updates
          git add .
          git commit -m "chore(release): version packages"

          # Build again with updated versions
          pnpm build

          # Publish packages
          pnpm changeset publish

          # Push the version updates and create tag
          git tag -a "v${MCP_VERSION}" -m "Release v${MCP_VERSION}"
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Create GitHub Release
        if: steps.changesets.outputs.has_changesets == 'true' && env.RELEASE_TAG != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { RELEASE_TAG, MCP_VERSION, TEST_UTILS_VERSION, AGENT_VERSION, CLI_VERSION } = process.env;

            // Get the commits since the last tag
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            // Create a nice markdown body
            const body = `## Packages

            - @nullshot/mcp: ${MCP_VERSION}
            - @nullshot/test-utils: ${TEST_UTILS_VERSION}
            - @nullshot/agent: ${AGENT_VERSION}
            - @nullshot/cli: ${CLI_VERSION}

            ## Recent Changes

            ${commits.slice(0, 5).map(commit => 
              `- ${commit.commit.message} (${commit.sha.substring(0, 7)})`
            ).join('\n')}`;

            // Create the release
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: RELEASE_TAG,
              name: `Release ${RELEASE_TAG}`,
              body: body,
              draft: false,
              prerelease: false
            });
