name: Pull Request

on:
  pull_request:
    paths:
      - 'packages/**'
      - '.github/workflows/**'

jobs:
  test-and-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test

      - name: Find changed packages
        id: changed_packages
        run: |
          # Get changed directories and format as JSON array
          DIRS_JSON=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | 
                      grep -o 'packages/[^/]*' | 
                      sort | 
                      uniq | 
                      jq -R -s -c 'split("\n")[:-1]')
          echo "dirs=$DIRS_JSON" >> $GITHUB_OUTPUT
          
          # For logging, get the space-separated list
          CHANGED_DIRS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | 
                        grep -o 'packages/[^/]*' | 
                        sort | 
                        uniq)
          echo "Changed packages: $CHANGED_DIRS"

      - name: Dry run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Convert JSON array to space-separated list for shell processing
          PACKAGES_LIST=$(echo '${{ steps.changed_packages.outputs.dirs }}' | jq -r 'join(" ")')
          
          # Create a release template if it doesn't exist
          if [ ! -f .github/release-template.json ]; then
            echo '{"branches": ["main"], "plugins": [["@semantic-release/commit-analyzer", { "preset": "angular" }], "@semantic-release/release-notes-generator", "@semantic-release/npm", "@semantic-release/github"]}' > .github/release-template.json
          fi
          
          # Perform dry run for each changed package
          for PKG in $PACKAGES_LIST; do
            echo "Testing release for package: $PKG"
            cd $PKG
            
            # Check if .releaserc.json exists, create if not
            if [ ! -f .releaserc.json ]; then
              echo "Creating .releaserc.json from template"
              cp ../../.github/release-template.json .releaserc.json
            fi
            
            # Run semantic-release dry run to verify it will work when merged
            npx semantic-release --dry-run
            
            cd ../../
          done
          
      - name: Package information summary
        run: |
          # Convert JSON array to space-separated list for shell processing
          PACKAGES_LIST=$(echo '${{ steps.changed_packages.outputs.dirs }}' | jq -r 'join(" ")')
          
          echo "## Package Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for PKG in $PACKAGES_LIST; do
            echo "### ${PKG}" >> $GITHUB_STEP_SUMMARY
            cd $PKG
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "- Current version: ${CURRENT_VERSION}" >> $GITHUB_STEP_SUMMARY
            cd ../../
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This PR is safe to merge. Once merged to main, packages will be published automatically." >> $GITHUB_STEP_SUMMARY 