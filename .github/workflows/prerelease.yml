name: Prerelease

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to create prerelease for (leave empty for all)'
        required: false
        type: string
      prerelease_tag:
        description: 'Prerelease tag (e.g., beta, canary, alpha)'
        required: true
        default: 'beta'
        type: string

jobs:
  prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build packages
        run: yarn build

      - name: Test packages
        run: yarn test

      - name: Configure Git User
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      
      - name: Set package list
        id: package_list
        run: |
          if [ -n "${{ github.event.inputs.package }}" ]; then
            PACKAGES="packages/${{ github.event.inputs.package }}"
            echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          else
            PACKAGES=$(find packages -type f -name "package.json" -not -path "*/node_modules/*" | grep -o 'packages/[^/]*' | sort | uniq)
            echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          fi
          echo "Selected packages: $PACKAGES"

      - name: Create prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE_TAG: ${{ github.event.inputs.prerelease_tag }}
        run: |
          # Get the package directories
          PACKAGE_DIRS="${{ steps.package_list.outputs.packages }}"
          
          for PKG in $PACKAGE_DIRS; do
            echo "Creating prerelease for $PKG with tag $PRERELEASE_TAG"
            cd $PKG
            
            # Get current version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Current version: $CURRENT_VERSION"
            
            # Generate a prerelease version based on current version
            # Format: X.Y.Z-beta.0+TIMESTAMP
            TIMESTAMP=$(date +%s)
            PRERELEASE_VERSION="${CURRENT_VERSION%-*}-${PRERELEASE_TAG}.0+${TIMESTAMP}"
            echo "Prerelease version: $PRERELEASE_VERSION"
            
            # Update package.json with new version
            npm version "$PRERELEASE_VERSION" --no-git-tag-version
            
            # Publish package with prerelease tag
            npm publish --tag $PRERELEASE_TAG
            
            cd ../../
          done 