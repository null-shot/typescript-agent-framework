name: Publish Packages to npm

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish (leave empty to detect changes)'
        required: false
        type: string
      force_publish:
        description: 'Force publish even without version change'
        required: false
        type: boolean
        default: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find changed packages
        id: changed-packages
        if: ${{ github.event.inputs.package == '' }}
        run: |
          # Get all packages
          PACKAGES=$(find packages -type f -name "package.json" -not -path "*/node_modules/*" | grep -o 'packages/[^/]*' | sort | uniq)
          
          # Get last successful run commit
          git fetch origin
          LAST_COMMIT=$(git rev-parse HEAD^)
          
          # Initialize array for changed packages
          CHANGED=()
          
          # Check each package
          for PKG in $PACKAGES; do
            if git diff --name-only $LAST_COMMIT HEAD | grep -q "^$PKG/"; then
              echo "$PKG has changes"
              PKG_NAME=$(basename $PKG)
              CHANGED+=("$PKG_NAME")
            fi
          done
          
          # Convert to JSON array for matrix directly using jq
          if [ ${#CHANGED[@]} -eq 0 ]; then
            echo "No changes detected in any package"
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            # Use jq to create a valid JSON array and ensure it's properly escaped
            JSON_ARRAY=$(printf '%s\n' "${CHANGED[@]}" | jq -R . | jq -c -s .)
            echo "Changed packages: $JSON_ARRAY"
            echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT
          fi

      - name: Use manually specified package
        id: manual-package
        if: ${{ github.event.inputs.package != '' }}
        run: |
          PACKAGE="${{ github.event.inputs.package }}"
          echo "Publishing package: $PACKAGE"
          # Correctly format as valid JSON array with proper quotes
          JSON_ARRAY=$(echo "$PACKAGE" | jq -R . | jq -c '[.]')
          echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.package }}" != "" ]]; then
            MATRIX="${{ steps.manual-package.outputs.matrix }}"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
            echo "Final matrix value: $MATRIX"
          elif [[ "${{ steps.changed-packages.outputs.matrix }}" == "[]" || -z "${{ steps.changed-packages.outputs.matrix }}" ]]; then
            echo "No changes detected in any package"
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "Final matrix value: []"
          else
            MATRIX="${{ steps.changed-packages.outputs.matrix }}"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
            echo "Final matrix value: $MATRIX"
          fi

      - name: Debug output
        run: echo "Matrix to be used in publish job - ${{ steps.set-matrix.outputs.matrix }}"

  publish:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: |
          cd packages/${{ matrix.package }}
          yarn build

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          FORCE_PUBLISH: ${{ github.event.inputs.force_publish }}
        run: |
          cd packages/${{ matrix.package }}
          # Check if .releaserc.json exists, create if not
          if [ ! -f .releaserc.json ]; then
            echo "Creating .releaserc.json from template"
            cp ../../.github/release-template.json .releaserc.json
          fi
          # Install semantic-release if not in package.json
          if ! grep -q "semantic-release" package.json; then
            yarn add --dev semantic-release @semantic-release/git
          fi
          
          # Add force publish flag if specified
          if [ "$FORCE_PUBLISH" == "true" ]; then
            echo "Running with force publish flag"
            npx semantic-release --no-ci
          else
            npx semantic-release 